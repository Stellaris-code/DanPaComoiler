/*
types.c

Copyright (c) 25 Yann BOUCHER (yann)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#include "types.h"
#include "error.h"
#include "ast_nodes.h"

#include <assert.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>

typedef DYNARRAY(const char*) types_str_t;

const char* default_types_str[DEFAULT_TYPES_END] =
{
    "int",
    "real",
    "str",
    "void"
};

static types_str_t types_str;

typedef struct typedef_alias_t
{
    const char* alias;
    type_t type;
} typedef_alias_t;

static DYNARRAY(structure_t) defined_structures;
static DYNARRAY(typedef_alias_t) typedef_list;

// 0 - cannot, 1 - explicit, 2 - always
const uint8_t cast_matrix[DEFAULT_TYPES_END][DEFAULT_TYPES_END] =
{
    // int to
    {2, 2, 0, 0},
    // real to
    {1, 2, 0, 0},
    // str to
    {0, 0, 2, 0},
    // void to
    {0, 0, 0, 0}
};

function_t* type_current_function;
program_t*  type_current_program ;

type_t mk_type(base_type_t base)
{
    type_t type;
    type.kind = BASIC;
    type.base_type = base;
    return type;
}

void types_init()
{
    DYNARRAY_INIT(defined_structures, 32);
    DYNARRAY_INIT(types_str, DEFAULT_TYPES_END + 32);
    DYNARRAY_RESIZE(types_str, DEFAULT_TYPES_END);
    memcpy(types_str.ptr, default_types_str, DEFAULT_TYPES_END*sizeof(const char*));
}

static DYNARRAY(int) type_stack;
const char* type_to_str(const type_t* type)
{
    char* type_str_buffer = (char*)danpa_alloc(128);

    DYNARRAY_RESIZE(type_stack, 0);
    type_str_buffer[0] = '\0'; // reset
    int length = 0;
    while (type->kind != BASIC)
    {
        DYNARRAY_ADD(type_stack, type->kind);
        if (type->kind == ARRAY)
        {
            type = type->array.array_type;
        }
        else if (type->kind == POINTER)
        {
            type = type->pointer.pointed_type;
        }
    }


    length += snprintf(type_str_buffer+length, 128-length, "%s", types_str.ptr[type->base_type]);
    for (int i = type_stack.size-1; i >= 0; --i)
    {
        if (type_stack.ptr[i] == ARRAY)
        {
            length += snprintf(type_str_buffer+length, 128-length, "%s", "[]");
        }
        else if (type_stack.ptr[i] == POINTER)
        {
            length += snprintf(type_str_buffer+length, 128-length, "%s", "*");
        }
    }

    return type_str_buffer;
}

const structure_t* get_struct(const type_t* type)
{
    assert(is_struct(type));
    return &defined_structures.ptr[type->base_type - DEFAULT_TYPES_END];
}

size_t sizeof_type(const type_t* type)
{
    if (type->kind != BASIC || type->base_type < DEFAULT_TYPES_END)
        return POD_SIZE;
    else
        return defined_structures.ptr[type->base_type - DEFAULT_TYPES_END].byte_size;
}

int cmp_types(const type_t* lhs, const type_t* rhs)
{
    if (lhs->kind != rhs->kind)
        return 0;
    if (lhs->kind == POINTER)
        return cmp_types(lhs->pointer.pointed_type, rhs->pointer.pointed_type);
    if (lhs->kind == ARRAY)
        return cmp_types(lhs->array.array_type, rhs->array.array_type);
    return lhs->base_type == rhs->base_type;
}

type_t define_structure(const structure_t* structure)
{
    DYNARRAY_ADD(types_str, structure->name->data.str);
    DYNARRAY_ADD(defined_structures, *structure);

    type_t new_type;
    new_type.base_type = DEFAULT_TYPES_END + defined_structures.size-1;
    return new_type; // structure id + default type offset
}

type_t get_expression_type(const expression_t *expr);

type_t get_binop_type(const binop_t* binop)
{
    type_t l_type = get_expression_type(&binop->left);
    type_t r_type = get_expression_type(&binop->right);

    assert(cmp_types(&l_type, &r_type) == 1);
    return l_type;
}

type_t get_prim_expr_type(const primary_expression_t* prim_expr)
{
    switch (prim_expr->type)
    {
        case ENCLOSED:
            return get_expression_type(prim_expr->expr);
        case UNARY_OP_FACTOR:
            return get_prim_expr_type(prim_expr->unary_expr.unary_value);
        case CAST_EXPRESSION:
            return prim_expr->cast_expr.target_type;
        case IDENT:
            return prim_expr->ident.type;
        case ARRAY_SUBSCRIPT:
            return *get_prim_expr_type(prim_expr->array_sub.array_expr).array.array_type;
        case STRUCT_ACCESS:
            return prim_expr->struct_access.value_type;
        case POINTER_DEREF:
            return *get_prim_expr_type(prim_expr->deref.pointer_expr).pointer.pointed_type;
        case ADDR_GET:
            return *get_prim_expr_type(prim_expr->deref.pointer_expr).pointer.pointed_type;  
        case FUNCTION_CALL:
            return prim_expr->func_call.called_func->signature.ret_type;
        case INT_CONSTANT:
            return mk_type(INT);
        case FLOAT_CONSTANT:
            return mk_type(REAL);
        case STRING_LITERAL:
            return mk_type(STR);
        default:
            assert(0 && "invalid prim expr type");
    }
}

type_t get_expression_type(const expression_t *expr)
{
    if (expr->kind == PRIM_EXPR)
        return get_prim_expr_type(&expr->prim_expr);
    else if (expr->kind == BINOP)
        return get_binop_type(expr->binop);
    else
        assert(0 && "invalid expr type");
}

type_t get_type(const char* type)
{
    for (int i = 0; i < types_str.size; ++i)
    {
        if (strcmp(type, types_str.ptr[i]) == 0)
        {
            return mk_type((base_type_t)i);
        }
    }

    for (int i = 0; i < typedef_list.size; ++i)
    {
        if (strcmp(type, typedef_list.ptr[i].alias) == 0)
        {
            return typedef_list.ptr[i].type;
        }
    }

    return mk_type(INVALID_TYPE);
}

void add_typedef(const char* alias, type_t real_type)
{
    DYNARRAY_ADD(typedef_list, {alias, real_type});
}

int can_implicit_cast(const type_t* from, const type_t* to)
{
    if (cmp_types(from, to))
        return 1; // trivial

    if (from->kind != BASIC || to->kind != BASIC)
        return 0;

    if (from->base_type >= DEFAULT_TYPES_END || to->base_type >= DEFAULT_TYPES_END) // user types
        return 0;

    return cast_matrix[from->base_type][to->base_type] >= 2;
}

int can_explicit_cast(const type_t* from, const type_t* to)
{
    if (cmp_types(from, to))
        return 1; // trivial

    if (from->kind != BASIC || to->kind != BASIC)
        return 0;

    if (from->base_type >= DEFAULT_TYPES_END || to->base_type >= DEFAULT_TYPES_END) // user types
        return 0;

    return cast_matrix[from->base_type][to->base_type] >= 1;
}
